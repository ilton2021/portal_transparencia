<?php
namespace App\Http\Controllers;
use App\Model\Assistencial;use Illuminate\Http\Request;use App\Model\Unidade;use App\Model\LoggerUsers;use App\Model\PermissaoUsers;use Auth;use Illuminate\Support\Facades\DB;
class AssistencialController extends Controller{	//Método Construtor, Instanciar as classes.	public function __construct(Unidade $unidade, Assistencial $assistencial, LoggerUsers $logger_users)	{		$this->unidade 		= $unidade;		$this->assistencial = $assistencial;		$this->logger_users = $logger_users;	}	//Usado quando o usuário clica no Menu: Relatório Assistencial.
    public function index()    {        $unidades = $this->unidade->all();		return view('transparencia.assistencial', compact('unidades')); 		    }	//Usado quando o usuário clica no botão Alterar no Relatório Assistencial. 
	public function assistencialCadastro($id)	{ 			$permissao_users = PermissaoUsers::where('unidade_id', $id)->get();		$qtd = sizeof($permissao_users);		$validacao = '';		for($i = 0; $i < $qtd; $i++) {			if($permissao_users[$i]->user_id == Auth::user()->id) {				$validacao = 'ok';				break;			} else {				$validacao = 'erro';			}		}		$unidades = $unidadesMenu = $this->unidade->all();		$unidade = $this->unidade->find($id);		$unidadesMenu = $this->unidade->all();				$anosRef = Assistencial::where('unidade_id', $id)->orderBy('ano_ref', 'ASC')->pluck('ano_ref')->unique();        $lastUpdated = '2020-06-15 10:00:00';		$text = false;		if($validacao == 'ok') {			return view('transparencia/assistencial/assistencial_cadastro', compact('unidade','unidades','unidadesMenu','anosRef','lastUpdated','text'));		} else {			\Session::flash('mensagem', ['msg' => 'Você não tem Permissão!!','class'=>'green white-text']);					$text = true;			return view('home', compact('unidades','unidade','unidadesMenu','text')); 				}	}	//Usado quando o usuário clica no botão Alterar ao selecionar o ano do Relatório Assistencial.
	public function assistencialAlterar($id_unidade, $id_item, Request $request)	{ 			$permissao_users = PermissaoUsers::where('unidade_id', $id_unidade)->get();		$qtd = sizeof($permissao_users);		$validacao = '';		for($i = 0; $i < $qtd; $i++) {			if($permissao_users[$i]->user_id == Auth::user()->id && ($permissao_users[$i]->unidade_id == $id_unidade)) {				$validacao = 'ok';				break;			} else {				$validacao = 'erro';			}		}		$unidades = $unidadesMenu = $this->unidade->all();		$unidade = $this->unidade->find($id_unidade);		$unidadesMenu = $this->unidade->all();		$anosRef = Assistencial::where('id', $id_item)->where('unidade_id',$id_unidade)->get();        $lastUpdated = $anosRef->max('updated_at');		$text = false;		if($validacao == 'ok') {			return view('transparencia/assistencial/assistencial_alterar', compact('unidade','unidades','unidadesMenu','anosRef','lastUpdated','text'));		} else {			\Session::flash('mensagem', ['msg' => 'Você não tem Permissão!!','class'=>'green white-text']);					$text = true;			return view('home', compact('unidades','unidade','unidadesMenu','text')); 				}	}	//Usado quando o usuário clica no botão Excluir ao selecionar o ano do Relatório Assistencial.
	public function assistencialExcluir($id_unidade, $id_item)	{ 			$permissao_users = PermissaoUsers::where('unidade_id', $id_unidade)->get();		$qtd = sizeof($permissao_users);		$validacao = '';		for($i = 0; $i < $qtd; $i++) {			if($permissao_users[$i]->user_id == Auth::user()->id) {				$validacao = 'ok';				break;			} else {				$validacao = 'erro';			}		}		$unidades = $unidadesMenu = $this->unidade->all();		$unidade = $this->unidade->find($id_unidade);		$unidadesMenu = $this->unidade->all();				$anosRef = Assistencial::where('ano_ref', $id_item)->where('unidade_id',$id_unidade)->get();        $lastUpdated = $anosRef->max('updated_at');				$text = false;		if($validacao == 'ok') {			return view('transparencia/assistencial/assistencial_excluir', compact('unidade','unidades','unidadesMenu','anosRef','lastUpdated','text'));		} else {			\Session::flash('mensagem', ['msg' => 'Você não tem Permissão!!','class'=>'green white-text']);					$text = true;			return view('home', compact('unidades','unidade','unidadesMenu','text')); 				}	}	//Usado quando o usuário clica no botão Novo no Relatório Assistencial.
	public function assistencialNovo($id_unidade, Request $request)	{			$permissao_users = PermissaoUsers::where('unidade_id', $id_unidade)->get();		$qtd = sizeof($permissao_users);		$validacao = '';		for($i = 0; $i < $qtd; $i++) {			if($permissao_users[$i]->user_id == Auth::user()->id) {				$validacao = 'ok';				break;			} else {				$validacao = 'erro';			}		}		$unidades = $unidadesMenu = $this->unidade->all();		$unidade = $this->unidade->find($id_unidade);		$unidadesMenu = $this->unidade->all();				$text = false;		if($validacao == 'ok') {			if(!empty($_GET['year'])) {				$ano = $_GET['year'];				$anosRef = Assistencial::where('ano_ref', $ano)->where('unidade_id',$id_unidade)->get();				return view('transparencia/assistencial/assistencial_novo', compact('unidade','unidades','unidadesMenu','anosRef','text'));			} else {				return view('transparencia/assistencial/assistencial_novo', compact('unidade','unidades','unidadesMenu','text'));				}		} else {			\Session::flash('mensagem', ['msg' => 'Você não tem Permissão!!','class'=>'green white-text']);					$text = true;			return view('home', compact('unidades','unidade','unidadesMenu','text')); 				}	}		public function assistencialValidar($id_unidade, $id_item, $ano, Request $request)	{			$permissao_users = PermissaoUsers::where('unidade_id', $id_unidade)->get();		$qtd = sizeof($permissao_users);		$validacao = '';		for($i = 0; $i < $qtd; $i++) {			if($permissao_users[$i]->user_id == Auth::user()->id) {				$validacao = 'ok';				break;			} else {				$validacao = 'erro';			}		}		$unidades = $unidadesMenu = $this->unidade->all();		$unidade = $this->unidade->find($id_unidade);		$unidadesMenu = $this->unidade->all();				$assistencial = Assistencial::find($id_item);		DB::statement('UPDATE assistencials SET validar = 0 WHERE id = '.$id_item.';');		if($validacao == 'ok') {			\Session::flash('mensagem', ['msg' => 'Relatório Assistencial validado com Sucesso!!','class'=>'green white-text']);					$text = true;			$anosRef = Assistencial::where('ano_ref', $ano)->where('unidade_id',$id_unidade)->get();			return view('transparencia/assistencial/assistencial_novo', compact('unidade','unidades','unidadesMenu','anosRef','text','ano'));		} else {			\Session::flash('mensagem', ['msg' => 'Você não tem Permissão!!','class'=>'green white-text']);					$text = true;			return view('home', compact('unidades','unidade','unidadesMenu','text')); 				}	}	//Método para Salvar o Relatório Assistencial.
    public function storeAssistencial($id, Request $request)    {			$unidade = $this->unidade->find($id);		$unidadesMenu = $this->unidade->all();		$anosRef = Assistencial::where('unidade_id', $id)->orderBy('ano_ref', 'ASC')->pluck('ano_ref')->unique();        $lastUpdated = $anosRef->max('updated_at');		$input = $request->all(); 			$v = \Validator::make($request->all(), [			'ano_ref' 	=> 'required|numeric'		]);		if ($input['ano_ref'] < 1800 || $input['ano_ref'] > 2500) {			\Session::flash('mensagem', ['msg' => 'O campo ano é inválido!','class'=>'green white-text']);			$text = true;			return view('transparencia/assistencial/assistencial_novo', compact('unidade','unidadesMenu','anosRef','lastUpdated','text'));		}		if ($v->fails()) {			$failed = $v->failed();			if ( !empty($failed['ano_ref']['Required']) ) {					\Session::flash('mensagem', ['msg' => 'O campo ano é obrigatório!','class'=>'green white-text']);			} else if ( !empty($failed['ano_ref']['Numeric']) ) {				\Session::flash('mensagem', ['msg' => 'O campo ano é numérico!','class'=>'green white-text']);			}			$text = true;			return view('transparencia/assistencial/assistencial_novo', compact('unidade','unidadesMenu','anosRef','lastUpdated','text'));		} else {				if($input['descricao'] == ""){ $input['descricao'] = ""; }				if($input['meta'] == ""){ $input['meta'] = ""; }				if($input['janeiro'] == ""){ $input['janeiro'] = ""; }				if($input['fevereiro'] == ""){ $input['fevereiro'] = ""; }				if($input['marco'] == ""){ $input['marco'] = ""; }				if($input['abril'] == ""){ $input['abril'] = ""; }				if($input['maio'] == ""){ $input['maio'] = ""; }				if($input['junho'] == ""){ $input['junho'] = ""; }				if($input['julho'] == ""){ $input['julho'] = ""; }				if($input['agosto'] == ""){ $input['agosto'] = ""; }				if($input['setembro'] == ""){ $input['setembro'] = ""; }				if($input['outubro'] == ""){ $input['outubro'] = ""; }				if($input['novembro'] == ""){ $input['novembro'] = ""; }				if($input['dezembro'] == ""){ $input['dezembro'] = ""; }				$assistencial = Assistencial::create($input); 				$ano = $input['ano_ref'];				$anosRef = Assistencial::where('unidade_id', $id)->where('ano_ref', $ano)->get();				$log = LoggerUsers::create($input);				$lastUpdated = $log->max('updated_at');				$text = true;				\Session::flash('mensagem', ['msg' => 'Relatório Assistencial cadastrado com sucesso!','class'=>'green white-text']);							$permissao_users = PermissaoUsers::where('unidade_id', $id)->get();				return view('transparencia/assistencial/assistencial_novo', compact('unidade','unidadesMenu','anosRef','lastUpdated','text','permissao_users'));			}	}
	//Método para Alterar o Relatório Assistencial.    public function update($id_unidade, $id_item, Request $request)    { 		$unidadesMenu = $this->unidade->all();		$unidades 	  = $unidadesMenu;		$unidade = $this->unidade->find($id_unidade);		$anosRef = Assistencial::where('unidade_id', $id_unidade)->get();		$lastUpdated = $anosRef->max('updated_at'); 		$input = $request->all(); 			$v = \Validator::make($request->all(), [			'ano_ref' 	=> 'required|numeric'		]);		if ($input['ano_ref'] < 1800 || $input['ano_ref'] > 2500) {			\Session::flash('mensagem', ['msg' => 'O campo ano é inválido!','class'=>'green white-text']);			$text = true;			return view('transparencia/assistencial/assistencial_alterar', compact('unidade','unidadesMenu','anosRef','lastUpdated','text'));		}		if ($v->fails()) {			$failed = $v->failed();			if ( !empty($failed['ano_ref']['Required']) ) {					\Session::flash('mensagem', ['msg' => 'O campo ano é obrigatório!','class'=>'green white-text']);			} else if ( !empty($failed['ano_ref']['Numeric']) ) {				\Session::flash('mensagem', ['msg' => 'O campo ano é numérico!','class'=>'green white-text']);			}			$text = true;			return view('transparencia/assistencial/assistencial_alterar', compact('unidade','unidadesMenu','anosRef','lastUpdated','text'));		} else {			if($input['descricao'] == ""){ $input['descricao'] = ""; }			if($input['meta'] == ""){ $input['meta'] = ""; }			if($input['janeiro'] == ""){ $input['janeiro'] = ""; }			if($input['fevereiro'] == ""){ $input['fevereiro'] = ""; }			if($input['marco'] == ""){ $input['marco'] = ""; }			if($input['abril'] == ""){ $input['abril'] = ""; }			if($input['maio'] == ""){ $input['maio'] = ""; }			if($input['junho'] == ""){ $input['junho'] = ""; }			if($input['julho'] == ""){ $input['julho'] = ""; }			if($input['agosto'] == ""){ $input['agosto'] = ""; }			if($input['setembro'] == ""){ $input['setembro'] = ""; }			if($input['outubro'] == ""){ $input['outubro'] = ""; }			if($input['novembro'] == ""){ $input['novembro'] = ""; }			if($input['dezembro'] == ""){ $input['dezembro'] = ""; }			$assis = Assistencial::find($id_item);			$assis->update($input);								$log = LoggerUsers::create($input);			$lastUpdated = $log->max('updated_at');			$ano = $input['ano_ref'];			$anosRef = Assistencial::where('unidade_id', $id_unidade)->where('ano_ref', $ano)->get();			$text = true;			\Session::flash('mensagem', ['msg' => 'Relatório Assistencial alterado com sucesso!','class'=>'green white-text']);					$permissao_users = PermissaoUsers::where('unidade_id', $id_unidade)->get();			return view('transparencia/assistencial/assistencial_novo', compact('unidade','unidades','unidadesMenu','anosRef','lastUpdated','text','permissao_users'));		}    }	//Método para Excluir o Relatório Assistencial.    public function destroy($id_unidade, $id_item, Assistencial $assistencial, Request $request)    { 		$unidadesMenu = $this->unidade->all(); 		$unidades = $unidadesMenu;		$unidade = $this->unidade->find($id_unidade);		$assistencial = Assistencial::where('unidade_id',$id_unidade)->where('ano_ref',$id_item)->get();		$qtd = sizeof($assistencial);  		for( $i = 0; $i < $qtd; $i++) {			Assistencial::find($assistencial[$i]->id)->delete();  				}		$input = $request->all();		$log = LoggerUsers::create($input);		$lastUpdated = $log->max('updated_at');		$anosRef = Assistencial::where('unidade_id', $id_unidade)->orderBy('ano_ref', 'ASC')->pluck('ano_ref')->unique();     		$text = true;		\Session::flash('mensagem', ['msg' => 'Relatório Assistencial excluído com sucesso!','class'=>'green white-text']);					return view('transparencia/assistencial/assistencial_cadastro', compact('unidade','unidades','unidadesMenu','anosRef','lastUpdated','text'));		    }}