<?php
namespace App\Http\Controllers;
use App\Model\Covenio;use App\Model\Unidade;use Illuminate\Http\Request;use App\Model\LoggerUsers;use Illuminate\Support\Facades\Storage;use App\Model\PermissaoUsers;use Auth;
class CoveniosController extends Controller{    public function __construct(Unidade $unidade, Covenio $covenio, LoggerUsers $logger_users)    {        $this->unidade 		= $unidade;		$this->covenio 		= $covenio;		$this->logger_users = $logger_users;    }
	public function index(Unidade $unidade)    {        $unidades = $this->unidade->all();		return view('transparencia.covenio', compact('unidades'));    }
	public function covenioNovo($id_unidade)	{		$permissao_users = PermissaoUsers::where('unidade_id', $id_unidade)->get();		$qtd = sizeof($permissao_users);		$validacao = '';	    for($i = 0; $i < $qtd; $i++) {			if($permissao_users[$i]->user_id == Auth::user()->id && ($permissao_users[$i]->unidade_id == 1)) {				$validacao = 'ok';			} else {				$validacao = 'erro';			}		}		$unidades = $unidadesMenu = $this->unidade->all();		$unidade = $this->unidade->find($id_unidade);		$unidadesMenu = $this->unidade->all();		$text = false;		if($validacao == 'ok') {			return view('transparencia/covenio/covenio_novo', compact('unidades','unidade','unidadesMenu','text'));		} else {			\Session::flash('mensagem', ['msg' => 'Você não tem Permissão!!','class'=>'green white-text']);					$text = true;			return view('home', compact('unidades','unidade','unidadesMenu','text')); 				}	}
	public function covenioCadastro($id_unidade, Covenio $covenio)	{		$permissao_users = PermissaoUsers::where('unidade_id', $id_unidade)->get();		$qtd = sizeof($permissao_users);		$validacao = '';	    for($i = 0; $i < $qtd; $i++) {			if($permissao_users[$i]->user_id == Auth::user()->id && ($permissao_users[$i]->unidade_id == 1)) {				$validacao = 'ok';			} else {				$validacao = 'erro';			}		}		$unidades = $unidadesMenu = $this->unidade->all();		$unidade = $this->unidade->find($id_unidade);		$unidadesMenu = $this->unidade->all();		$covenios = Covenio::all();        $lastUpdated = $covenios->max('updated_at');        $text = false;		if($validacao == 'ok') {			return view('transparencia/covenio/covenio_cadastro', compact('unidades','unidade','unidadesMenu','covenios','lastUpdated','text'));		} else {			\Session::flash('mensagem', ['msg' => 'Você não tem Permissão!!','class'=>'green white-text']);					$text = true;			return view('home', compact('unidades','unidade','unidadesMenu','text')); 				}	}
	public function covenioExcluir($id_unidade, $escolha)	{		$permissao_users = PermissaoUsers::where('unidade_id', $id_unidade)->get();		$qtd = sizeof($permissao_users);		$validacao = '';	    for($i = 0; $i < $qtd; $i++) {			if($permissao_users[$i]->user_id == Auth::user()->id && ($permissao_users[$i]->unidade_id == 1)) {				$validacao = 'ok';			} else {				$validacao = 'erro';			}		}		$unidades = $unidadesMenu = $this->unidade->all();		$unidade = $this->unidade->find($id_unidade);		$unidadesMenu = $this->unidade->all();		$covenios = Covenio::where('id',$escolha)->get();        $lastUpdated = $covenios->max('updated_at');        		$text = false;		if($validacao == 'ok') {			return view('transparencia/covenio/covenio_excluir', compact('unidades','unidade','unidadesMenu','covenios','lastUpdated','text'));		} else {			\Session::flash('mensagem', ['msg' => 'Você não tem Permissão!!','class'=>'green white-text']);					$text = true;			return view('home', compact('unidades','unidade','unidadesMenu','text')); 				}	}
    public function store($id_unidade, Request $request)    { 		$unidades = $unidadesMenu = $this->unidade->all();		$unidade = $this->unidade->find($id_unidade);		$unidadesMenu = $this->unidade->all();		$covenios = Covenio::where('unidade_id',$id_unidade)->get();        $lastUpdated = $covenios->max('updated_at');		$input = $request->all();		$nome = $_FILES['path_file']['name']; 		$extensao = pathinfo($nome, PATHINFO_EXTENSION);		if($request->file('path_file') === NULL) {				\Session::flash('mensagem', ['msg' => 'Informe o arquivo do Covênio!','class'=>'green white-text']);					$text = true;			return view('transparencia/covenio/covenio_novo', compact('unidades','unidade','unidadesMenu','covenios','lastUpdated','text'));		} else {			if($extensao === 'pdf') {				$v = \Validator::make($request->all(), [					'title'    => 'required|max:255',				]);				if ($v->fails()) {					$failed = $v->failed();					if ( !empty($failed['title']['Required']) ) {						\Session::flash('mensagem', ['msg' => 'O campo título é obrigatório!','class'=>'green white-text']);					} else if ( !empty($failed['title']['Max']) ) { 						\Session::flash('mensagem', ['msg' => 'O campo título possui no máximo 255 caracteres!','class'=>'green white-text']);					}					$text = true;					return view('transparencia.covenio', compact('unidades','unidade','unidadesMenu','covenios','lastUpdated','text'));				} else {					$nome = $_FILES['path_file']['name']; 					$upload = $request->file('path_file')->move('../public/storage/covenio', $nome);					$input['path_file'] = 'covenio/' .$nome;					$input['path_name'] = $nome; 					$covenio = Covenio::create($input);					$log = LoggerUsers::create($input);					$lastUpdated = $log->max('updated_at');					$covenios = Covenio::where('unidade_id',$id_unidade)->get();					\Session::flash('mensagem', ['msg' => 'Covênio cadastrado com sucesso!','class'=>'green white-text']);					$text = true;					return view('transparencia/covenio/covenio_cadastro', compact('unidades','unidade','unidadesMenu','covenios','lastUpdated','text'));				}			} else {					\Session::flash('mensagem', ['msg' => 'Só é suportado arquivos: pdf!','class'=>'green white-text']);						$text = true;				return view('transparencia/covenio/covenio_novo', compact('unidades','unidade','unidadesMenu','covenios','lastUpdated','text'));			}		}    }	    public function destroy($id_unidade, $id_escolha, Covenio $covenio, Request $request)    {        Covenio::find($id_escolha)->delete();		$input = $request->all();		$log = LoggerUsers::create($input);		$lastUpdated = $log->max('updated_at');		$nome = $input['path_name'];		$pasta = 'public/'.$nome; 		Storage::delete($pasta);		$unidades = $unidadesMenu = $this->unidade->all();		$unidade = $this->unidade->find($id_unidade);		$unidadesMenu = $this->unidade->all();		$covenios = Covenio::where('unidade_id',$id_unidade)->get();        \Session::flash('mensagem', ['msg' => 'Covênio excluído com sucesso!','class'=>'green white-text']);		$text = true;		return view('transparencia/covenio/covenio_cadastro', compact('unidades','unidade','unidadesMenu','covenios','lastUpdated','text'));    }}