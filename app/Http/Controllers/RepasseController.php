<?php
namespace App\Http\Controllers;
use App\Model\Repasse;use App\Model\Unidade;use Illuminate\Http\Request;use App\Model\LoggerUsers;use App\Model\PermissaoUsers;use Auth;use Illuminate\Support\Facades\DB;
class RepasseController extends Controller{	public function __construct(Unidade $unidade, Repasse $repasse, LoggerUsers $logger_users)    {        $this->unidade 		= $unidade;		$this->repasse 		= $repasse;		$this->logger_users = $logger_users;    }    public function index()    {		$unidades = $this->unidade->all();		return view ('repasses', compact('unidades'));    }
    public function repasseCadastro($id)	{		$permissao_users = PermissaoUsers::where('unidade_id', $id)->get();		$qtd = sizeof($permissao_users);		$validacao = '';		for($i = 0; $i < $qtd; $i++) {			if($permissao_users[$i]->user_id == Auth::user()->id) {				$validacao = 'ok';				break;			} else {				$validacao = 'erro';			}		}		$unidadesMenu = $this->unidade->all(); 		$unidades = $this->unidade->all();		$unidade = $unidadesMenu->find($id);				$repasses = Repasse::where('unidade_id', $id)->orderBy('ano', 'ASC')->get();        $anoRepasses = $repasses->pluck('ano')->unique();        $mesRepasses = $repasses->pluck('mes')->unique();        $mesUpdate = $repasses->where('ano', $anoRepasses->last())->pluck('mes')->last();        function valorMes($month){            $monthArray = array(                "1" => "janeiro",                "2" => "fevereiro",				"3" => "março",                "4" => "abril",                "5" => "maio",                "6" => "junho",                "7" => "julho",                "8" => "agosto",                "9" => "setembro",                "10" => "outubro",                "11" => "novembro",                "12" => "dezembro",            );            return array_search($month, $monthArray);        };		$lastUpdated = valorMes($mesUpdate)."/"."1/".$anoRepasses->last();		$somContratado = $repasses->sum('contratado');		$somRecebido = $repasses->sum('recebido');		$text = false;        if($validacao == 'ok') {			return view('transparencia/repasses/repasses_cadastro', compact('unidade','unidadesMenu','repasses','somContratado','somRecebido','anoRepasses','mesRepasses','lastUpdated','text'));		} else {			\Session::flash('mensagem', ['msg' => 'Você não tem Permissão!!','class'=>'green white-text']);					$text = true;			return view('home', compact('unidades','unidade','unidadesMenu','text')); 				}	}
	public function repasseNovo($id)	{		$permissao_users = PermissaoUsers::where('unidade_id', $id)->get();		$qtd = sizeof($permissao_users);		$validacao = '';			    for($i = 0; $i < $qtd; $i++) {			if($permissao_users[$i]->user_id == Auth::user()->id) {				$validacao = 'ok';				break;			} else {				$validacao = 'erro';			}		}		$unidadesMenu = $this->unidade->all(); 		$unidades = $this->unidade->all();		$unidade = $unidadesMenu->find($id);		$repasses = Repasse::where('unidade_id', $id)->orderBy('ano', 'ASC')->get();        $anoRepasses = $repasses->pluck('ano')->unique();        $mesRepasses = $repasses->pluck('mes')->unique();        $mesUpdate = $repasses->where('ano', $anoRepasses->last())->pluck('mes')->last();        function valorMes($month){            $monthArray = array(                "1" => "janeiro",                "2" => "fevereiro",                "3" => "março",                "4" => "abril",                "5" => "maio",				"6" => "junho",				"7" => "julho",                "8" => "agosto",                "9" => "setembro",                "10" => "outubro",                "11" => "novembro",                "12" => "dezembro",            );            return array_search($month, $monthArray);        };        $lastUpdated = valorMes($mesUpdate)."/"."1/".$anoRepasses->last();		$text = false;        if($validacao == 'ok') {			return view('transparencia/repasses/repasses_novo', compact('unidade','unidadesMenu','repasses','anoRepasses','mesRepasses','lastUpdated','text'));		} else {			\Session::flash('mensagem', ['msg' => 'Você não tem Permissão!!','class'=>'green white-text']);					$text = true;			return view('home', compact('unidades','unidade','unidadesMenu','text')); 				}	}
	public function repasseAlterar($id_unidade, $id_item)	{		$permissao_users = PermissaoUsers::where('unidade_id', $id_unidade)->get();		$qtd = sizeof($permissao_users);		$validacao = '';		for($i = 0; $i < $qtd; $i++) {			if($permissao_users[$i]->user_id == Auth::user()->id) {				$validacao = 'ok';				break;			} else {				$validacao = 'erro';			}		}		$unidadesMenu = $this->unidade->all(); 		$unidades = $this->unidade->all();		$unidade = $unidadesMenu->find($id_unidade);				$repasses = Repasse::where('id', $id_item)->get();        $anoRepasses = $repasses->pluck('ano')->unique();        $mesRepasses = $repasses->pluck('mes')->unique();        $mesUpdate = $repasses->where('ano', $anoRepasses->last())->pluck('mes')->last();        function valorMes($month){            $monthArray = array(                "1" => "janeiro",                "2" => "fevereiro",                "3" => "março",                "4" => "abril",                "5" => "maio",                "6" => "junho",                "7" => "julho",                "8" => "agosto",				"9" => "setembro",                "10" => "outubro",                "11" => "novembro",                "12" => "dezembro",            );            return array_search($month, $monthArray);        };        $lastUpdated = valorMes($mesUpdate)."/"."1/".$anoRepasses->last();		$text = false;        if($validacao == 'ok') {			return view('transparencia/repasses/repasses_alterar', compact('unidade','unidadesMenu','repasses','anoRepasses','mesRepasses','lastUpdated','text'));		} else {			\Session::flash('mensagem', ['msg' => 'Você não tem Permissão!!','class'=>'green white-text']);					$text = true;			return view('home', compact('unidades','unidade','unidadesMenu','text')); 				}	}		public function repasseValidar($id_unidade, $id_item)	{		$permissao_users = PermissaoUsers::where('unidade_id', $id_unidade)->get();		$qtd = sizeof($permissao_users);		$validacao = '';		for($i = 0; $i < $qtd; $i++) {			if($permissao_users[$i]->user_id == Auth::user()->id) {				$validacao = 'ok';				break;			} else {				$validacao = 'erro';			}		}		$unidadesMenu = $this->unidade->all(); 		$unidades = $this->unidade->all();		$unidade = $unidadesMenu->find($id_unidade);				$text = false;		$repasses = Repasse::find($id_item);		DB::statement('UPDATE repasses SET validar = 0 WHERE id = '.$id_item.';');		$repasses = Repasse::where('unidade_id', $id_unidade)->orderBy('ano', 'ASC')->get();        $anoRepasses = $repasses->pluck('ano')->unique();        $mesRepasses = $repasses->pluck('mes')->unique();        $mesUpdate = $repasses->where('ano', $anoRepasses->last())->pluck('mes')->last();        function valorMes($month){            $monthArray = array(                "1" => "janeiro",                "2" => "fevereiro",				"3" => "março",                "4" => "abril",                "5" => "maio",                "6" => "junho",                "7" => "julho",                "8" => "agosto",                "9" => "setembro",                "10" => "outubro",                "11" => "novembro",                "12" => "dezembro",            );            return array_search($month, $monthArray);        };		$lastUpdated = $repasses->max('updated_at');		$somContratado = $repasses->sum('contratado');		$somRecebido = $repasses->sum('recebido');		if($validacao == 'ok') {			\Session::flash('mensagem', ['msg' => 'Repasse validado com Sucesso!!','class'=>'green white-text']);					$text = true;			return view('transparencia/repasses/repasses_cadastro', compact('unidade','unidadesMenu','repasses','anoRepasses','mesRepasses','lastUpdated','text','somContratado','somRecebido'));		} else {			\Session::flash('mensagem', ['msg' => 'Você não tem Permissão!!','class'=>'green white-text']);					$text = true;			return view('home', compact('unidades','unidade','unidadesMenu','text')); 				}	}
	public function repasseExcluir($id_unidade, $id_item)	{		$permissao_users = PermissaoUsers::where('unidade_id', $id_unidade)->get();		$qtd = sizeof($permissao_users);		$validacao = '';	    for($i = 0; $i < $qtd; $i++) {			if($permissao_users[$i]->user_id == Auth::user()->id) {				$validacao = 'ok';				break;			} else {				$validacao = 'erro';			}		}		$unidadesMenu = $this->unidade->all(); 		$unidades = $this->unidade->all();		$unidade = $unidadesMenu->find($id_unidade);				$repasses = Repasse::where('id', $id_item)->get();        $anoRepasses = $repasses->pluck('ano')->unique();        $mesRepasses = $repasses->pluck('mes')->unique();        $mesUpdate = $repasses->where('ano', $anoRepasses->last())->pluck('mes')->last();        function valorMes($month){            $monthArray = array(                "1" => "janeiro",                "2" => "fevereiro",                "3" => "março",                "4" => "abril",                "5" => "maio",                "6" => "junho",                "7" => "julho",                "8" => "agosto",                "9" => "setembro",                "10" => "outubro",                "11" => "novembro",                "12" => "dezembro",           );            return array_search($month, $monthArray);        };        $lastUpdated = valorMes($mesUpdate)."/"."1/".$anoRepasses->last();		$text = false;        if($validacao == 'ok') {			return view('transparencia/repasses/repasses_excluir', compact('unidade','unidadesMenu','repasses','anoRepasses','mesRepasses','lastUpdated','text'));		} else {			\Session::flash('mensagem', ['msg' => 'Você não tem Permissão!!','class'=>'green white-text']);					$text = true;			return view('home', compact('unidades','unidade','unidadesMenu','text')); 				}	}
    public function store($id_unidade, Request $request)    {		$unidadesMenu = $this->unidade->all(); 		$unidades = $this->unidade->all();		$unidade = $unidadesMenu->find($id_unidade);		$input = $request->all();		$repasses = Repasse::where('unidade_id', $id_unidade)->orderBy('ano', 'ASC')->get();		$anoRepasses = $repasses->pluck('ano')->unique();		$mesRepasses = $repasses->pluck('mes')->unique();		$mesUpdate = $repasses->where('ano', $anoRepasses->last())->pluck('mes')->last();		function valorMes($month){				$monthArray = array(					"1" => "janeiro",					"2" => "fevereiro",					"3" => "março",					"4" => "abril",					"5" => "maio",					"6" => "junho",					"7" => "julho",					"8" => "agosto",					"9" => "setembro",					"10" => "outubro",					"11" => "novembro",					"12" => "dezembro",				);				return array_search($month, $monthArray);			};		$lastUpdated = valorMes($mesUpdate)."/"."1/".$anoRepasses->last();		$v = \Validator::make($request->all(), [				'mes' 		 => 'required',				'ano' 		 => 'required|digits:4',				'contratado' => 'required',				'recebido'   => 'required',				'desconto'   => 'required'		]);		if ($input['ano'] < 1800 || $input['ano'] > 2500) {			\Session::flash('mensagem', ['msg' => 'O campo ano é inválido!','class'=>'green white-text']);			$text = true;			return view('transparencia/repasses/repasses_novo', compact('unidades','unidade','unidadesMenu','repasses','lastUpdated','text'));		} else if ( $input['contratado'] < 0 ) {			\Session::flash('mensagem', ['msg' => 'O campo contratado não pode ser negativo!','class'=>'green white-text']);			$text = true;			return view('transparencia/repasses/repasses_novo', compact('unidades','unidade','unidadesMenu','repasses','lastUpdated','text'));		} else if ( $input['recebido'] < 0 ) {			\Session::flash('mensagem', ['msg' => 'O campo recebido não pode ser negativo!','class'=>'green white-text']);			$text = true;			return view('transparencia/repasses/repasses_novo', compact('unidades','unidade','unidadesMenu','repasses','lastUpdated','text'));		} else if ( $input['desconto'] < 0 ) {			\Session::flash('mensagem', ['msg' => 'O campo desconto não pode ser negativo!','class'=>'green white-text']);			$text = true;			return view('transparencia/repasses/repasses_novo', compact('unidades','unidade','unidadesMenu','repasses','lastUpdated','text'));		}		$mes = $input['mes'];		$ano = $input['ano'];		$repass = Repasse::where('mes', $mes)->where('ano', $ano)->where('unidade_id',$id_unidade)->get(); 		$qtd = sizeof($repass);		if( $qtd !== 0 ) {				\Session::flash('mensagem', ['msg' => 'Este mês e ano já foram cadastrados para esta empresa!','class'=>'green white-text']);			$text = true;			return view('transparencia/repasses/repasses_novo', compact('unidades','unidade','unidadesMenu','repasses','lastUpdated','text'));		}		if ($v->fails()) {			$failed = $v->failed();			if ( !empty($failed['mes']['Required']) ) {				\Session::flash('mensagem', ['msg' => 'O campo mês é obrigatório!','class'=>'green white-text']);			} else if ( !empty($failed['ano']['Required']) ) {				\Session::flash('mensagem', ['msg' => 'O campo ano é obrigatório!','class'=>'green white-text']);			} else if ( !empty($failed['ano']['Digits']) ) {				    \Session::flash('mensagem', ['msg' => 'O campo ano possui 4 caracteres!','class'=>'green white-text']);			} else if ( !empty($failed['contratado']['Required']) ) {				\Session::flash('mensagem', ['msg' => 'O campo contratado é obrigatório!','class'=>'green white-text']);			} else if ( !empty($failed['recebido']['Required']) ) {				    \Session::flash('mensagem', ['msg' => 'O campo recebido é obrigatório!','class'=>'green white-text']);			} else if ( !empty($failed['desconto']['Required']) ) {				    \Session::flash('mensagem', ['msg' => 'O campo desconto é obrigatório!','class'=>'green white-text']);			}			$text = true;			return view('transparencia/repasses/repasses_novo', compact('unidades','unidade','unidadesMenu','repasses','lastUpdated','text'));		} else {			$repasse = Repasse::create($input);			$log = LoggerUsers::create($input);						$repasses = Repasse::where('unidade_id', $id_unidade)->orderBy('ano', 'ASC')->get();			$anoRepasses = $repasses->pluck('ano')->unique();			$mesRepasses = $repasses->pluck('mes')->unique();			$mesUpdate = $repasses->where('ano', $anoRepasses->last())->pluck('mes')->last();			$lastUpdated = $log->max('updated_at');			$somContratado = $repasses->sum('contratado');        	$somRecebido = $repasses->sum('recebido');			\Session::flash('mensagem', ['msg' => 'Repasses Recebidos cadastrado com sucesso!','class'=>'green white-text']);						$text = true;			return view('transparencia/repasses/repasses_cadastro', compact('unidades','unidade','unidadesMenu','repasses','somContratado','somRecebido','anoRepasses','mesRepasses','mesUpdate','lastUpdated','text'));		}    }
	public function update($id_unidade, $id_item, Request $request)    {		$unidadesMenu = $this->unidade->all(); 		$unidades = $this->unidade->all();		$unidade = $unidadesMenu->find($id_unidade);		$input = $request->all();		$repasses = Repasse::where('unidade_id', $id_unidade)->orderBy('ano', 'ASC')->get();		$anoRepasses = $repasses->pluck('ano')->unique();		$mesRepasses = $repasses->pluck('mes')->unique();		$mesUpdate = $repasses->where('ano', $anoRepasses->last())->pluck('mes')->last();		function valorMes($month){				$monthArray = array(					"1" => "janeiro",					"2" => "fevereiro",					"3" => "março",					"4" => "abril",					"5" => "maio",					"6" => "junho",					"7" => "julho",					"8" => "agosto",					"9" => "setembro",					"10" => "outubro",					"11" => "novembro",					"12" => "dezembro",				);				return array_search($month, $monthArray);			};		$lastUpdated = valorMes($mesUpdate)."/"."1/".$anoRepasses->last();				$v = \Validator::make($request->all(), [			'mes' 		 => 'required',			'ano' 		 => 'required|digits:4',			'contratado' => 'required',			'recebido'   => 'required',			'desconto'   => 'required'		]);				if ($input['ano'] < 1800 || $input['ano'] > 2500) {			\Session::flash('mensagem', ['msg' => 'O campo ano é inválido!','class'=>'green white-text']);			$text = true;			return view('transparencia/repasses/repasses_novo', compact('unidades','unidade','unidadesMenu','repasses','lastUpdated','text'));		} else if ( $input['contratado'] < 0 ) {			\Session::flash('mensagem', ['msg' => 'O campo contratado não pode ser negativo!','class'=>'green white-text']);			$text = true;			return view('transparencia/repasses/repasses_novo', compact('unidades','unidade','unidadesMenu','repasses','lastUpdated','text'));		} else if ( $input['recebido'] < 0 ) {			\Session::flash('mensagem', ['msg' => 'O campo recebido não pode ser negativo!','class'=>'green white-text']);			$text = true;			return view('transparencia/repasses/repasses_novo', compact('unidades','unidade','unidadesMenu','repasses','lastUpdated','text'));		} else if ( $input['desconto'] < 0 ) {			\Session::flash('mensagem', ['msg' => 'O campo desconto não pode ser negativo!','class'=>'green white-text']);			$text = true;			return view('transparencia/repasses/repasses_alterar', compact('unidades','unidade','unidadesMenu','repasses','lastUpdated','text'));		}		if ($v->fails()) {			$failed = $v->failed();			if ( !empty($failed['mes']['Required']) ) {				\Session::flash('mensagem', ['msg' => 'O campo mês é obrigatório!','class'=>'green white-text']);			} else if ( !empty($failed['ano']['Required']) ) {				\Session::flash('mensagem', ['msg' => 'O campo ano é obrigatório!','class'=>'green white-text']);			} else if ( !empty($failed['ano']['Digits']) ) {				    \Session::flash('mensagem', ['msg' => 'O campo ano possui 4 caracteres!','class'=>'green white-text']);			} else if ( !empty($failed['contratado']['Required']) ) {				\Session::flash('mensagem', ['msg' => 'O campo contratado é obrigatório!','class'=>'green white-text']);			} else if ( !empty($failed['recebido']['Required']) ) {				    \Session::flash('mensagem', ['msg' => 'O campo recebido é obrigatório!','class'=>'green white-text']);			} else if ( !empty($failed['desconto']['Required']) ) {				    \Session::flash('mensagem', ['msg' => 'O campo desconto é obrigatório!','class'=>'green white-text']);			}			$text = true;			return view('transparencia/repasses/repasses_alterar', compact('unidades','unidade','unidadesMenu','repasses','lastUpdated','text'));		} else {			$repasse = Repasse::find($id_item);			$repasse->update($input);						$log = LoggerUsers::create($input);			$repasses = Repasse::where('unidade_id', $id_unidade)->orderBy('ano', 'ASC')->get();			$anoRepasses = $repasses->pluck('ano')->unique();			$mesRepasses = $repasses->pluck('mes')->unique();			$mesUpdate = $repasses->where('ano', $anoRepasses->last())->pluck('mes')->last();			$lastUpdated = $log->max('updated_at');			$somContratado = $repasses->sum('contratado');        	$somRecebido = $repasses->sum('recebido');			\Session::flash('mensagem', ['msg' => 'Repasses Recebidos alterado com sucesso!','class'=>'green white-text']);						$text = true;			return view('transparencia/repasses/repasses_cadastro', compact('unidades','unidade','unidadesMenu','repasses','somContratado','somRecebido','anoRepasses','mesRepasses','mesUpdate','lastUpdated','text'));		}    }
    public function destroy($id_unidade, $id_item, Repasse $repasse, Request $request)    {		Repasse::find($id_item)->delete();				$input = $request->all();		$log = LoggerUsers::create($input);        $unidadesMenu = $this->unidade->all(); 		$unidades = $this->unidade->all();		$unidade = $unidadesMenu->find($id_unidade);		$repasses = Repasse::where('unidade_id', $id_unidade)->orderBy('ano', 'ASC')->get();		$anoRepasses = $repasses->pluck('ano')->unique();		$mesRepasses = $repasses->pluck('mes')->unique();        $mesUpdate = $repasses->where('ano', $anoRepasses->last())->pluck('mes')->last();        function valorMes($month){            $monthArray = array(                "1" => "janeiro",                "2" => "fevereiro",                "3" => "março",                "4" => "abril",                "5" => "maio",                "6" => "junho",                "7" => "julho",                "8" => "agosto",                "9" => "setembro",                "10" => "outubro",                "11" => "novembro",                "12" => "dezembro",            );            return array_search($month, $monthArray);        };        $lastUpdated = $log->max('updated_at');		$text = true;		$somContratado = $repasses->sum('contratado');        $somRecebido = $repasses->sum('recebido');		\Session::flash('mensagem', ['msg' => 'Repasses Recebidos excluído com sucesso!','class'=>'green white-text']);					return view('transparencia/repasses/repasses_cadastro', compact('unidades','unidade','unidadesMenu','repasses','somContratado','somRecebido','anoRepasses','mesRepasses','mesUpdate','lastUpdated','text'));    }}